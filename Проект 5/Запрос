-- Дата первой успешной транзакции для каждого юзера

with first_payments as (
    select  user_id,
            min(date_trunc('day', transaction_datetime)) as first_payment_date
    from skyeng_db.payments p
    where status_name = 'success'
    group by user_id
    order by user_id
),

-- Все дни 2016 года

all_dates as (
    select distinct date_trunc('day', class_start_datetime) as dt
    from skyeng_db.classes c
    where date_part('year', class_start_datetime) = 2016
    order by dt
),

-- Количество оплаченных уроков за каждый день для каждого ученика.

payments_by_dates as (    
    select  user_id
            , date_trunc('day', transaction_datetime) as payment_date
            , sum(classes) as transaction_balance_change
    from skyeng_db.payments p
    where status_name = 'success'
    group by user_id
            , payment_date
    order by user_id
            , payment_date
),

-- Все даты жизни студента после того, как произошла его первая транзакция.

all_dates_by_user as (
    select user_id, dt
    from first_payments as f
        join all_dates as d
            on d.dt >= f.first_payment_date
    order by user_id, dt
),

-- Количество пройденных уроков за каждый день для каждого ученика.

classes_by_dates as (
    select  user_id
            , date_trunc('day', class_start_datetime) as class_date
            , - count(*) as classes
    from skyeng_db.classes
    where class_type != 'trial'
        and class_status in ('success', 'failed_by_student')
    group by 1, 2
    order by 1, 2
),

-- Баланс студентов, который сформирован только транзакциями. 

payments_by_dates_cumsum as (
    select  a.*
            , coalesce (p.transaction_balance_change, 0) as transaction_balance_change
            , sum(coalesce (p.transaction_balance_change, 0)) over (partition by a.user_id order by a.dt) as transaction_balance_change_cs
    from all_dates_by_user a
        left join payments_by_dates p
            on a.user_id = p.user_id and a.dt = p.payment_date
),

-- Кумулятивная сумма количества пройденных уроков. 

classes_by_dates_dates_cumsum as (
    select  a.*
            , coalesce (c.classes, 0) as classes
            , sum(coalesce (c.classes, 0)) over (partition by a.user_id order by a.dt) as classes_cs
    from all_dates_by_user a
    left join classes_by_dates c
        on a.user_id = c.user_id and a.dt = c.class_date
),

-- Баланс каждого студента на каждый день

balances as (
    select  p.*
            , c.classes
            , c.classes_cs
            , c.classes_cs + p.transaction_balance_change_cs as balance
    from payments_by_dates_cumsum p
    join classes_by_dates_dates_cumsum c
        on p.dt = c.dt and p.user_id = c.user_id
),


-- Топ-1000 строк из balances с сортировкой по user_id и dt 

top_1000 as (
    select *
    from balances
    order by user_id, dt
    limit 1000
),

-- ! У некоторых студентов встречаются отрицательные балансы. Возможно занесены не все транзакции в payments.
-- Выведем список студентов у которых имеются значения баланса < 0 для проверки информации инженерами

users_with_negative_balance as (
    select distinct user_id
    from balances
    where balance < 0
    order by user_id
    )

-- Динамика общего количества уроков на балансах всех студентов по датам.

select  dt
        , sum(transaction_balance_change) as count_paid_classes
        , sum(transaction_balance_change_cs) as count_paid_classes_cs
        , sum(classes) as count_receive_classes
        , sum(classes_cs) as count_receive_classes_cs
        , sum(balance) as balance
from balances
group by dt
order by dt
